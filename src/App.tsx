import { useRef, useState, useEffect } from "react";
import "./App.css";

interface SlovoProps extends React.SVGProps<SVGPathElement> {
  ispisanost: number;
}

function useSlovo(ispisanost: number) {
  const ref = useRef<SVGPathElement>(null);
  const [duzinaSlova, setDuzinaSlova] = useState<number>(0);
  const relativnaIspisanost = (duzinaSlova / 100) * ispisanost;

  useEffect(() => {
    setDuzinaSlova(Math.round(ref.current?.getTotalLength() || 0));
  }, []);

  return {
    ref,
    strokeDasharray: `${duzinaSlova} ${duzinaSlova}`,
    strokeDashoffset: duzinaSlova - relativnaIspisanost,
  };
}

const slova = [
  ({ ispisanost, ...rest }: SlovoProps) => {
    const hookProps = useSlovo(ispisanost);
    return (
      <path
        {...rest}
        {...hookProps}
        id="slovo-u"
        d="M182.867 208.799c-2.363-6.666-3.49-15.942-1.787-20.96 1.702-5.017 28.653-33.013 36.902-32.054 8.25.96 22.595 4.553 23.7 16.224 2.06 21.754-15.028 62.757-44.064 131.681-19.282 52.065 3.736 65.701 12.857 51.247 11.54-12.072 67.792-178.276 66.78-192.027-1.012-13.75-5.168-4.233-9.557 5.63-6.923 15.557-33.185 174.338-33.626 183.368-5.786 24.79-6.29 108.97-7.677 126.016-1.386 17.046-3.066 47.266-23.443 23.381-20.377-23.885-20.862-73.198-10.91-88.989 9.95-15.79 48.477-59.814 53.686-66.131 5.209-6.317 33.577-43.004 31.03-50.362"
      />
    );
  },
  ({ ispisanost, ...rest }: SlovoProps) => {
    const ref = useRef<SVGPathElement>(null);
    const [duzinaSlova, setDuzinaSlova] = useState<number>(0);
    const relativnaIspisanost = (duzinaSlova / 100) * ispisanost;

    useEffect(() => {
      setDuzinaSlova(Math.round(ref.current?.getTotalLength() || 0) + 1);
    }, []);

    return (
      <path
        ref={ref}
        strokeDasharray={`${duzinaSlova} ${duzinaSlova}`}
        strokeDashoffset={duzinaSlova - relativnaIspisanost}
        {...rest}
        id="slovo-c"
        d="M276.758 295.823c-.77-2.222-29.006 58.474 10.396 21.755 9.096-8.613 11.676-13.524 17.22-22.62 0 0-26.163 49.937-29.05 68.364-1.7 8.539-4.376 25.638 5.487 28.546 9.863 2.908 24-14.923 24-14.923s13.842-18.078 21.255-36.596c4.08-10.19 11.011-32.361 7.988-34.222"
      />
    );
  },
  ({ ispisanost, ...rest }: SlovoProps) => {
    const ref = useRef<SVGPathElement>(null);
    const [duzinaSlova, setDuzinaSlova] = useState<number>(0);
    const relativnaIspisanost = (duzinaSlova / 100) * ispisanost;

    useEffect(() => {
      setDuzinaSlova(Math.round(ref.current?.getTotalLength() || 0));
    }, []);

    return (
      <path
        ref={ref}
        strokeDasharray={`${duzinaSlova} ${duzinaSlova}`}
        strokeDashoffset={duzinaSlova - relativnaIspisanost}
        {...rest}
        id="slovo-i"
        d="M334.054 306.127c-5.373-3.307-19.364 45.678-17.132 55.555.56 1.988 3.526 27.74 19.86 6.216 16.332-21.524 22.636-39.144 28.35-55.17 5.159-14.468.743-14.26-.963-10.365-1.706 3.895-22.583 64.238-7.884 67.696 14.7 3.457 24.296-15.03 24.296-15.03"
      />
    );
  },
  ({ ispisanost, ...rest }: SlovoProps) => {
    const ref = useRef<SVGPathElement>(null);
    const [duzinaSlova, setDuzinaSlova] = useState<number>(0);
    const relativnaIspisanost = (duzinaSlova / 100) * ispisanost;

    useEffect(() => {
      setDuzinaSlova(Math.round(ref.current?.getTotalLength() || 0));
    }, []);

    return (
      <path
        ref={ref}
        strokeDasharray={`${duzinaSlova} ${duzinaSlova}`}
        strokeDashoffset={duzinaSlova - relativnaIspisanost}
        {...rest}
        id="slovo-m"
        d="M439.479 312.168s.735 40.6 6.465 50.62c6.23 10.896 10.504-1.65 12.549-5.23 8.97-15.701 21.913-83.23 30.293-132.042 8.13-47.356 11.44-62.038 11.44-62.038s-14.9 155.468-14.598 161.042c.301 5.574-4.202 45.463.995 32.556 5.198-12.907 30.906-115.37 30.906-115.37l25.528-93.401s-21.093 107.003-25.736 161.228c-1.494 17.442-3.304 45.28-.66 52.512 2.686 7.344 20.016 18.403 20.016 18.403"
      />
    );
  },
  ({ ispisanost, ...rest }: SlovoProps) => {
    const ref = useRef<SVGPathElement>(null);
    const [duzinaSlova, setDuzinaSlova] = useState<number>(0);
    const relativnaIspisanost = (duzinaSlova / 100) * ispisanost;

    useEffect(() => {
      setDuzinaSlova(ref.current?.getTotalLength() || 0);
    }, []);

    return (
      <path
        ref={ref}
        strokeDasharray={`${duzinaSlova} ${duzinaSlova}`}
        strokeDashoffset={duzinaSlova - relativnaIspisanost}
        {...rest}
        id="slovo-o"
        d="M550.915 334.384s12.381-15.938 16.299 1.72c3.917 17.658-2.632 40.051-9.165 40.561-6.533.51-16.36 3.49-23.916-18.406-7.556-21.896 5.032-44.666 20.09-44.542 15.058.124 68.454-.56 68.454-.56"
      />
    );
  },
];

function App() {
  const [ispisanost, setIspisanost] = useState<number>(0);
  const svgRef = useRef<SVGSVGElement>(null);

  return (
    <div className="App">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        id="svg2"
        width="769.433"
        height="578.866"
        version="1.1"
        xmlSpace="preserve"
        ref={svgRef}
      >
        <path
          id="spis"
          strokeWidth="0.716"
          d="M542.8 143.203c-1.944.042-3.899.961-4.74 2.803-.485 1.064-5.215 17.086-10.51 35.605-8.82 30.858-15.434 56.429-25.337 97.971l-3.713 15.582c-.189.878-.607 2.269-.846 3.402-1.683 7.62-6.818 25.99-6.86 24.538-.058-2.08 1.995-22.508 2.503-24.895.213-1.637.372-3.508.625-6.09.218-1.674 1.372-12.233 2.566-23.463a8298.205 8298.205 0 012.852-26.508c.374-3.349 1.324-13.343 2.113-22.209 4.355-48.927 4.655-57.726 2.053-60.15-3.97-3.7-8.666-.682-9.506 6.11-.29 2.337-1.31 7.796-2.268 12.13-3.384 15.315-6.117 29.737-8.488 44.778-.879 5.577-2.492 15.14-6.098 36.177-.742 4.335-2.499 14.102-3.904 21.705-.477 3.757-2.752 14.358-3.271 16.485-.138 1.596-4.405 20.69-6.864 30.453-5.12 20.332-10.895 35.27-12.87 33.295-.692-.691-3.86-18.783-4.618-26.356-1.467-14.683-2.003-18.222-3.174-20.955-1.652-3.857-3.353-3.538-5.486 1.028-1.48 3.167-1.716 4.667-1.605 10.209.149 7.48 1.816 21.041 3.455 28.107 1.51 6.51 5.551 14.763 8.039 16.414 1.093.726 3.187 1.326 4.652 1.332 6.437.029 12.626-10.748 18.744-32.637 2.175-7.78 9.756-39.61 9.756-40.962.386-1.593 1.684-8.614 1.961-10.075.6-3.157 1.973-10.723 2.217-10.756.314-.042-.634 8.432-1.12 13.104-.15 2.616-.8 5.584-.92 7.76-.005.295-.643 6.43-1.413 13.635-4.14 38.689-3.58 51.996 2.32 55.293 1.772.99 2.168.99 3.94 0 4.342-2.427 8.27-14.202 18.988-56.928.325-1.911 3.258-12.244 3.61-14.916.199-.52 2.394-9.538 4.876-20.037 2.444-10.335 5.292-21.847 5.456-21.85.164-.001-1.068 7.164-2.25 14.21-1.18 7.048-2.852 16.909-3.266 19.667-.414 2.758-.933 5.9-1.155 6.984-.19 1.326-.688 4.317-.846 5.713-.122 1.369-.695 6.263-1.35 10.975-.827 5.934-1.212 13.962-1.255 26.119-.057 16.482.044 17.942 1.684 23.941 2.504 9.164 4.666 11.771 11.523 13.909 2.948.918 7.544 2.482 10.215 3.474 3.688 1.37 5.089 1.608 5.828.994.75-.622 1.827-.277 4.686 1.5 4.224 2.627 10.298 3.492 14.582 2.078 8.692-2.868 15.595-16.658 15.515-31-.088-15.853-6.898-29.406-14.191-28.242-3.338.533-7.185 3.678-8.772 7.172-2.719 5.988-1.15 7.419 4.887 4.457 2.169-1.063 4.089-1.786 4.268-1.607.179.179.819 2.692 1.422 5.586 1.423 6.833.966 20.914-.842 25.92-1.734 4.8-5.947 9.16-8.28 8.566-2.935-.746-4.919-2.392-7.89-6.541-8.728-12.188-8.088-35.767 1.162-42.822 3.592-2.74 6.177-3.143 24.68-3.852 11.312-.433 19.538-1.129 25.074-2.125 4.531-.815 12.194-1.69 17.03-1.945 9.039-.475 11.5-1.249 10.69-3.36-.394-1.029-2.016-1.18-12.831-1.199-6.81-.011-16.896-.49-22.412-1.06-13.221-1.37-32.425-1.383-37.518-.028-8.607 2.291-15.272 7.246-18.647 13.86-6.6 12.94-5.48 34.03 2.471 46.459l2.463 3.851-2.644-1.105c-1.455-.608-3.79-1.974-5.19-3.035-6.846-5.19-7.564-8.268-7.55-32.412.01-17.387 1.267-30.799 2.821-39.2.181-1.097.505-4.094.674-5.04.22-1.084 1.677-9.708 3.24-19.165a8529.73 8529.73 0 016.145-36.537c11.877-69.573 14.56-87.478 13.649-91.11-.539-2.144-2.73-3.226-4.934-3.179zm-269.357 8.092a2.05 2.05 0 00-1.029.31c-1.81 1.142-7.147 12.09-9.564 19.62-4.999 15.566-12.645 48.209-18.21 77.73-1.866 9.904-3.696 16.636-7.886 29.016-3.101 9.098-7.033 20.914-8.996 25.908-10.383 28.016-18.207 45.263-22.254 49.057-4.808 4.507-7.68 3.474-9.129-3.284-2.11-9.835.831-29.242 7.281-48.04.87-1.918 2.087-5.104 2.752-6.704.857-2.39 5.204-14.627 14.36-35.777 19.934-46.05 25.238-62.604 25.295-78.951.033-9.691-1.676-14.99-6.604-20.471-10.64-11.835-24.792-10.848-42.01 2.932-9.793 7.837-17.624 17.342-20.238 24.558-1.396 3.854-1.388 11.949.016 14.662 1.38 2.669 2.433 3.506 6.011 4.768 2.565.905 3.045.903 3.801-.008.686-.827.585-1.665-.49-4.053-2.08-4.618-1.799-10.751.699-15.307 2.707-4.938 7.221-9.976 13.893-15.505 16.245-13.465 26.359-14.858 32.748-4.51 2.134 3.457 2.17 3.675 2.132 12.88-.042 10.3-.847 14.24-5.966 29.198-3.59 10.492-7.29 19.443-18.012 43.572-4.815 10.836-10.641 24.662-12.947 30.727a1866.055 1866.055 0 00-6.442 17.988c-7.026 22.164-8.836 41.399-4.888 51.95 2.224 5.945 7.173 10.804 11.695 11.482 10.197 1.53 18.159-8.655 29.86-38.201 2.296-5.799 4.187-10.352 4.202-10.117.016.234-.742 5.715-1.685 12.18a2674.085 2674.085 0 00-3.03 21.423L227.495 360l-5.389 5.748c-2.963 3.16-8.663 9.32-12.804 14.148-4.081 4.76-8.508 9.3-11.858 14.6-6.546 10.358-13.798 23.536-15.826 33.178-2.024 9.625-1.125 26.994 2.043 39.43 5.234 20.544 9.877 30.592 18.319 39.646 3.895 4.178 6.549 6.133 9.998 7.365 4.696 1.679 8.182.953 11.79-2.459 6.39-6.04 7.755-16.212 9.108-67.836.424-16.155 1.152-34.854 1.62-41.552 0 0 .512-8.123.849-12.178.095-1.151.221-2.3.332-3.45.397-4.119.803-8.58 1.191-12.357l1.19-11.51 5.707-6.402c5.45-6.111 14.889-17.593 18.218-22.164 1.255-1.723 1.743-1.97 2.471-1.252 2.397 2.364 10.222.25 15.176-4.1 1.27-1.115 2.339-1.89 2.586-1.892.035 0 .055.016.055.049 0 .26-1.1 3.128-2.444 6.373-8.206 19.824-12.34 39.995-10.262 50.078.518 3.801 1.132 5.596 3.514 8.437 5.309 5.812 14.218 5.928 22.803.3 3.2-1.998 5.683-4.222 8.463-7.434 1.502-1.488 3.984-4.284 5.515-6.213a628.132 628.132 0 013.288-4.118c.275-.335 2.065 1.008 3.976 2.985 7.551 7.81 14.723 5.175 25.332-9.309l4.127-5.633.488 2.702c1.164 6.428 6.26 10.53 12.895 10.378 7.188-.163 19.96-8.718 23.633-15.828 1.192-2.308 1.188-2.527-.055-4.836-1.253-2.327-1.94-2.8-3.482-2.4-.394.102-1.56.138-2.588.08-1.442-.08-2.342.575-3.926 2.861-2.242 3.235-11.195 9.938-13.276 9.938-.712 0-1.629-.625-2.037-1.387-2.031-3.796.33-20.801 4.284-30.851 2.448-6.224 8.222-25.513 8.91-29.766.377-2.334.486-3.434-.74-4.993l-1.836-1.778c-2.113-1.503-4.54-.518-5.77 1.253-2.484 2.884-9.515 22.277-12.402 34.21-2.801 11.575-20.318 37.61-25.305 37.61-3.265 0-4.286-8.972-1.615-14.206 6.996-13.714 16.667-44.644 15.465-49.461-1.104-4.425-5.534-5.805-9.248-2.883-4.637 3.647-13.178 26.305-16.807 44.584-1.89 9.518-2.39 10.973-5.43 15.852-6.084 9.761-14.133 18.543-19.888 21.697h-.002c-2.954 1.618-6.61 2.127-7.297 1.015-1.143-1.848-1.193-10.398-.1-16.957 2.382-14.29 7.285-28.084 17.53-49.314 3.453-7.158 7.184-15.35 8.29-18.207l2.012-5.193c.23-1.525-.344-2.379-1.549-3.582-1.182-1.182-2.758-2.15-3.502-2.15-1.437 0-4.146 2.612-4.571 3.727-1.317 2.638-2.118 4.655-3.429 6.86-2.301 4.54-10.394 12.827-17.88 18.313-4.625 3.387-6.547 4.093-6.547 2.402 0-.515 1.9-4.626 4.224-9.135 2.324-4.509 4.823-10.05 5.553-12.312l1.326-4.114c.383-1.466-.651-2.533-1.203-3.234-1.878-2.388-4.998-2.382-7.22.016-1.418 1.317-2.15 2.856-2.68 3.562-.906 1.673-1.568 3.525-3.483 7.36-1.915 3.834-3.896 8.243-4.4 9.796-1.173 3.61-9.858 16.478-16.455 24.377-2.809 3.363-5.253 6.114-5.43 6.114-.177 0-.32-.404-.318-.897.004-.79 3.073-22.133 5.023-34.926.39-2.56.954-6.268 1.252-8.238.477-2.877 2.531-17.944 4.438-26.197 2.822-16.281 4.242-22.526 7.072-31.115 5.256-15.958 13.911-43.45 14.66-46.569.19-.788 1.161-4.495 2.162-8.238 2.912-10.89 5.475-23.083 5.611-26.697.099-2.593-.304-3.965-1.8-6.123-1.928-2.782-4.075-4.364-5.696-4.303zm-47.988 225.812a.03.03 0 01.02.01c.18.181.1 2.772-.18 5.756 0 0-.287 3.623-.508 5.426-.154 1.259-.32 2.552-.423 3.816-.152 2.23-.481 7.432-.862 13.737-.381 6.304-1.176 27.259-1.766 46.566-1.036 33.934-2.08 47.74-3.861 51.069-1.719 3.211-4.593 1.753-9.918-5.034-7.588-9.67-10.194-15.423-14.154-31.255-3.41-13.633-4.374-23.163-3.305-32.66 1.425-12.662 5.188-20.986 16.209-35.85 5.073-6.432 5.206-6.303 9.373-11.285 1.06-1.814 8.831-10.331 9.375-10.295z"
          mask="url(#maska)"
        />
        <mask id="maska">
          <g
            id="layer1"
            fill="none"
            stroke="#fff"
            strokeDasharray="none"
            strokeLinecap="round"
            strokeOpacity="1"
            strokeWidth="11.5"
            strokeLinejoin="round"
          >
            {slova.map((Slovo) => (
              <Slovo ispisanost={ispisanost} />
            ))}
          </g>
        </mask>
      </svg>

      <div className="range-ispisanosti">
        <input
          type="range"
          id="ispisanost"
          name="ispisanost"
          min="0"
          max="100"
          value={ispisanost}
          onChange={(e) => setIspisanost(Number(e.target.value))}
        />
        <label htmlFor="ispisanost">ispisanost</label>
      </div>
    </div>
  );
}

export default App;
